name: Develop Version Branch Automation

on:
  create:

permissions:
  contents: write
  pull-requests: write

jobs:
  handle-develop-version-branch:
    name: Handle develop-x.y.z branch creation
    runs-on: ubuntu-24.04
    if: startsWith(github.ref_name, 'develop-') && github.ref_type == 'branch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          VERSION=$(echo "$BRANCH_NAME" | sed 's/develop-//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "chore_branch=chore/bump-$VERSION" >> $GITHUB_OUTPUT

      - name: Create chore branch for version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create and checkout chore branch from develop-x.y.z
          git checkout -b "${{ steps.extract_version.outputs.chore_branch }}"

      - name: Update pubspec.yaml version
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          PUBSPEC_PATH="pubspec.yaml"
          
          # Update version in pubspec.yaml (preserve existing version code)
          if grep -q "^version:" "$PUBSPEC_PATH"; then
            # Get current version code
            CURRENT_VERSION_CODE=$(grep "^version:" "$PUBSPEC_PATH" | sed -E 's/version:\s*[^+]+\+//' || echo "1")
            # Update with new version
            sed -i "s/^version:.*/version: ${VERSION}+${CURRENT_VERSION_CODE}/" "$PUBSPEC_PATH"
          else
            echo "Error: version field not found in $PUBSPEC_PATH"
            exit 1
          fi
          
          echo "Updated version to ${VERSION}+${CURRENT_VERSION_CODE}"

      - name: Commit version update
        run: |
          git add pubspec.yaml
          git commit -m "chore: bump version to ${{ steps.extract_version.outputs.version }}
          
          Update pubspec.yaml version for parallel development branch ${{ steps.extract_version.outputs.branch_name }}.
          
          Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

      - name: Push chore branch
        run: |
          git push origin "${{ steps.extract_version.outputs.chore_branch }}"

      - name: Create Pull Request for version bump
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # Check if PR already exists
          EXISTING_PR=$(gh pr list --head "${{ steps.extract_version.outputs.chore_branch }}" --base "${{ steps.extract_version.outputs.branch_name }}" --json number --jq '.[0].number // empty')
          
          if [ -z "$EXISTING_PR" ]; then
            echo "Creating new pull request for version bump..."
            gh pr create \
              --title "chore: bump version to ${{ steps.extract_version.outputs.version }} for parallel development" \
              --body "## Overview

          Version bump for parallel development branch \`${{ steps.extract_version.outputs.branch_name }}\`

          ## Changes

          - Updated \`pubspec.yaml\` version to \`${{ steps.extract_version.outputs.version }}\`
          - Prepared version configuration for parallel development

          ## Review Points

          - Verify that the version update is correct
          - Confirm that the version format follows the project standards

          ## Next Steps

          After merging this PR:
          1. Update branch protection rules for \`${{ steps.extract_version.outputs.branch_name }}\` if needed
          2. Start parallel development on the \`${{ steps.extract_version.outputs.branch_name }}\` branch

          ## Notes

          This PR was automatically generated by GitHub Actions when the \`${{ steps.extract_version.outputs.branch_name }}\` branch was created." \
              --base "${{ steps.extract_version.outputs.branch_name }}" \
              --head "${{ steps.extract_version.outputs.chore_branch }}"
            echo "Pull request created successfully"
          else
            echo "Pull request already exists (PR #$EXISTING_PR)"
          fi
