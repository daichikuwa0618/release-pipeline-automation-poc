name: Release Branch Automation

on:
  create:

permissions:
  contents: write
  pull-requests: write

jobs:
  handle-release-branch:
    name: Handle release/x.y.z branch creation
    runs-on: ubuntu-24.04
    if: startsWith(github.ref_name, 'release/') && github.ref_type == 'branch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version and find target branch
        id: find_target
        run: |
          RELEASE_BRANCH="${{ github.ref_name }}"
          RELEASE_VERSION=$(echo "$RELEASE_BRANCH" | sed 's/release\///')
          
          echo "Release branch: $RELEASE_BRANCH"
          echo "Release version: $RELEASE_VERSION"
          
          # Parse version (e.g., 1.1.0 -> 1, 1, 0)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$RELEASE_VERSION"
          
          # Calculate next minor version (e.g., 1.1.0 -> 1.2.0)
          NEXT_MINOR=$((MINOR + 1))
          TARGET_VERSION="${MAJOR}.${NEXT_MINOR}.${PATCH}"
          TARGET_BRANCH="develop-${TARGET_VERSION}"
          
          echo "Target branch: $TARGET_BRANCH"
          echo "target_branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
      - name: Check if target branch exists
        id: check_branch
        run: |
          TARGET_BRANCH="${{ steps.find_target.outputs.target_branch }}"
          
          if git show-ref --verify --quiet "refs/remotes/origin/$TARGET_BRANCH"; then
            echo "Branch $TARGET_BRANCH exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Branch $TARGET_BRANCH does not exist"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Create PR to merge develop-x.y.z to develop
        if: steps.check_branch.outputs.branch_exists == 'true'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TARGET_BRANCH="${{ steps.find_target.outputs.target_branch }}"
          RELEASE_VERSION="${{ steps.find_target.outputs.release_version }}"
          TARGET_VERSION="${{ steps.find_target.outputs.target_version }}"
          
          # Generate unique branch name with timestamp
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          PR_BRANCH="auto-release-merge/${TARGET_BRANCH}-to-develop-${TIMESTAMP}"
          
          echo "Creating PR branch: $PR_BRANCH"
          echo "Source branch: $TARGET_BRANCH"
          echo "Target branch: develop"
          
          # Check if PR already exists
          EXISTING_PR=$(gh pr list --head "$TARGET_BRANCH" --base develop --json number --jq '.[0].number // empty')
          
          if [ -z "$EXISTING_PR" ]; then
            echo "Creating new pull request..."
            
            # Create PR branch from target branch
            git fetch origin $TARGET_BRANCH
            git checkout -b $PR_BRANCH origin/$TARGET_BRANCH
            git push origin $PR_BRANCH
            
            # Create PR
            gh pr create \
              --title "feat: merge $TARGET_BRANCH to develop after v$RELEASE_VERSION release" \
              --body "## Overview

          Merging $TARGET_BRANCH to develop following the creation of release/v$RELEASE_VERSION branch.

          - Release preparation for v$RELEASE_VERSION has started
          - To transition parallel development of v$TARGET_VERSION to the develop branch, we are merging $TARGET_BRANCH to develop
          - After this merge, development for $TARGET_BRANCH will end, and v$TARGET_VERSION development will continue on the develop branch

          ## Verification Steps

          1. Review changes from $TARGET_BRANCH
          2. Confirm content to be merged into develop branch
          3. Run tests as needed to ensure no issues
          4. After merge, confirm that future v$TARGET_VERSION development will be done on the develop branch

          ## Notes

          This PR was automatically generated by GitHub Actions.
          It was triggered by the creation of the release/v$RELEASE_VERSION branch to automate parallel development transitions." \
              --base develop \
              --head $PR_BRANCH
            echo "Pull request created successfully"
          else
            echo "Pull request already exists (PR #$EXISTING_PR)"
          fi

      - name: Report result
        run: |
          TARGET_BRANCH="${{ steps.find_target.outputs.target_branch }}"
          if [ "${{ steps.check_branch.outputs.branch_exists }}" = "true" ]; then
            echo "✅ Created PR to merge $TARGET_BRANCH to develop"
          else
            echo "ℹ️ Target branch $TARGET_BRANCH does not exist, no action taken"
          fi
